---

AWSTemplateFormatVersion: "2010-09-09"
Description: Template Provision S3 Bucket with internet access

# Metadata:
#   template metadata

Parameters:
  DataStoreParameter:
    Type: String

  DataPolicyParameter:
    Type: String

# Rules:
#   set of rules

# Mappings:
#   set of mappings

# Conditions:
#   set of conditions

# Transform:
#   set of transforms


Resources:
  user-data-store:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref user-data-store
      CorsConfiguration: 
        CorsRule:
            AllowedHeaders: 
              - "*"
            AllowedMethods: 
              - Put
              - Post
              - Get
              - Delete
            AllowedOrigins: 
              - "*"
            ExposedHeaders: 
              - Date
      PublicAccessBlockConfiguration: 
          BlockPublicAcls: False
          BlockPublicPolicy: False
          IgnorePublicAcls: False
          RestrictPublicBuckets: False
      Tags: 
        - Key: "S3"
          Value: "UserData"
      VersioningConfiguration: 
        Status: Enabled
  

  Policy-data-store:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref user-data-store
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:DeleteObject
              - s3:GetObject
            Resource: '*'
        Resources:
          arn:aws:s3:::user-data-store/*


  user-data:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeDefinition
      BillingMode: String
      ContributorInsightsSpecification: 
        ContributorInsightsSpecification
      DeletionProtectionEnabled: Boolean
      GlobalSecondaryIndexes: 
        - GlobalSecondaryIndex
      ImportSourceSpecification: 
        ImportSourceSpecification
      KeySchema: 
        - KeySchema
      KinesisStreamSpecification: 
        KinesisStreamSpecification
      LocalSecondaryIndexes: 
        - LocalSecondaryIndex
      PointInTimeRecoverySpecification: 
        PointInTimeRecoverySpecification
      ProvisionedThroughput: 
        ProvisionedThroughput
      SSESpecification: 
        SSESpecification
      StreamSpecification: 
        StreamSpecification
      TableClass: String
      TableName: String
      Tags: 
        - Tag
      TimeToLiveSpecification: 
        TimeToLiveSpecification


  data-trans-func:
    Type: AWS::Lambda::Function
    Properties: 
      Architectures: 
        -  x86_64
      Code: 
        ZipFile | 
        import json
        import boto3

        # initiating resources
        s3_client= boto3.client('s3')

        dynamodb = boto3.resource('dynamodb')
        table = dynamodb.Table('user-info')

        def lambda_handler(event, context):
            bucket_name = event['Records'][0]["s3"]["bucket"]["name"]
            s3_file_name = event['Records'][0]["s3"]["object"]["key"]
            response = s3_client.get_object(Bucket='user-data-container', Key='mock-file-3.txt')
            
            # decode the data and split the data in the json to a newline
            user = response['Body'].read().decode('utf-8')
            user= user.split('\n')
            
            for data in user:
                # info.append(data.split(','))
                data= data.split(',')
                try:
                    table.put_item(
                        item={
                            "id": int(data[0]),
                            "firstname": str(data[1]),
                            "lastname": str(data[2]),
                            "email":data[3],
                            "gender":str(data[4]),
                            "ip_address":data[5],
                            "picture":data[6],
                            "country":data[7],
                            "state": data[8],
                            "address":str(data[9]),
                        }
                            )
                except Exception as err:
                    print (">>>>>>>>"+str(err))
            
            return{
                'statusCode': 200,
                'body': json.dumps('Items added successfully!')
                }
      Description: test function to move specific data to DyanmoDB
      FunctionName: !Ref data-trans-func
      Handler: data_trans_func.lambda_handler
      PackageType: zip
      Role: cil-academy-lambda-role
      Runtime: Python 3.10


Outputs:
  DataStoreOutput:
    Description: Output for data store s3 bucket with internet access
    Value: !Ref DataStoreParameter
    Export:
      Name: !Ref user-data-store

  DataPolicyOutput:
    Description: Data Policy 
    Value: !Ref DataPolicyParameter
    Export:
      Name: !Ref Policy-data-store